{
  "version": 3,
  "sources": ["../lib/polyval_a0.js", "../lib/polyval_a1.js", "../lib/polyval_r.js", "../lib/polyval_s.js", "../lib/polyval_t2.js", "../lib/polyval_u.js", "../lib/polyval_v.js", "../lib/polyval_w.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.07721566408872604;\n\t}\n\treturn float64ToFloat32(0.07721566408872604 + float64ToFloat32(x * float64ToFloat32(0.06734848022460938 + float64ToFloat32(x * 0.006982756312936544)))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.3224671185016632;\n\t}\n\treturn float64ToFloat32(0.3224671185016632 + float64ToFloat32(x * float64ToFloat32(0.020639566704630852 + float64ToFloat32(x * 0.004117684438824654)))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.679650068283081;\n\t}\n\treturn float64ToFloat32(0.679650068283081 + float64ToFloat32(x * float64ToFloat32(0.11605872958898544 + float64ToFloat32(x * 0.003756736870855093)))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.07721566408872604;\n\t}\n\treturn float64ToFloat32(-0.07721566408872604 + float64ToFloat32(x * float64ToFloat32(0.26998740434646606 + float64ToFloat32(x * float64ToFloat32(0.14285100996494293 + float64ToFloat32(x * 0.011938951909542084)))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.48383641242980957;\n\t}\n\treturn float64ToFloat32(0.48383641242980957 + float64ToFloat32(x * float64ToFloat32(-0.14758621156215668 + float64ToFloat32(x * float64ToFloat32(0.06460130959749222 + float64ToFloat32(x * float64ToFloat32(-0.03284503519535065 + float64ToFloat32(x * float64ToFloat32(0.01864837482571602 + float64ToFloat32(x * -0.009892062284052372)))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.07721566408872604;\n\t}\n\treturn float64ToFloat32(-0.07721566408872604 + float64ToFloat32(x * float64ToFloat32(0.7367897033691406 + float64ToFloat32(x * 0.4956490397453308)))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.1095842123031616;\n\t}\n\treturn float64ToFloat32(1.1095842123031616 + float64ToFloat32(x * float64ToFloat32(0.21059811115264893 + float64ToFloat32(x * -0.01029954943805933)))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333324640989304;\n\t}\n\treturn float64ToFloat32(0.08333324640989304 + float64ToFloat32(x * -0.0027612908743321896)); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/12.2.0/lib/msun/src/e_lgammaf_r.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar isInfinitef = require( '@stdlib/math-base-assert-is-infinitef' );\nvar absf = require( '@stdlib/math-base-special-absf' );\nvar lnf = require( '@stdlib/math-base-special-lnf' );\nvar truncf = require( '@stdlib/math-base-special-truncf' );\nvar sinpif = require( '@stdlib/math-base-special-sinpif' );\nvar f32 = require( '@stdlib/number-float64-base-to-float32' );\nvar PI = require( '@stdlib/constants-float32-pi' );\nvar PINF = require( '@stdlib/constants-float32-pinf' );\nvar polyvalA0 = require( './polyval_a0.js' );\nvar polyvalA1 = require( './polyval_a1.js' );\nvar polyvalR = require( './polyval_r.js' );\nvar polyvalS = require( './polyval_s.js' );\nvar polyvalT2 = require( './polyval_t2.js' );\nvar polyvalU = require( './polyval_u.js' );\nvar polyvalV = require( './polyval_v.js' );\nvar polyvalW = require( './polyval_w.js' );\n\n\n// VARIABLES //\n\nvar ZERO = f32( 0.0 );\nvar HALF = f32( 0.5 );\nvar ONE = f32( 1.0 );\nvar TWO = f32( 2.0 );\nvar THREE = f32( 3.0 );\nvar FOUR = f32( 4.0 );\nvar FIVE = f32( 5.0 );\nvar SIX = f32( 6.0 );\nvar EIGHT = f32( 8.0 );\nvar T0C = f32( -2.94064460e-11 );        // 0xAE0154B7\nvar T1C = f32( -2.35939837e-08 );        // 0xB2CAABB8\nvar W0C = f32( 4.18938547e-01 );         // 0x3ED67F1D\nvar TWO23 = f32( 8388608.0 );            // 2**23\nvar TWO27 = f32( 134217728.0 );          // 2**27\nvar TINY = f32( 7.450580596923828e-9 );  // 2**-27\nvar YMIN = f32( 1.46163213e+00 );        // 0x3FBB16C3\nvar TF = f32( -1.21486291e-01 );         // 0xBDF8CDCE\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the absolute value of the gamma function for a single-precision floating-point number.\n*\n* ## Method\n*\n* 1.  Argument reduction for \\\\(0 < x \\leq 8\\\\). Since \\\\(\\Gamma(1+s) = s \\Gamma(s)\\\\), for \\\\(x \\in \\[0,8]\\\\), we may reduce \\\\(x\\\\) to a number in \\\\(\\[1.5,2.5]\\\\) by\n*\n*     ```tex\n*     \\operatorname{lgamma}(1+s) = \\ln(s) + \\operatorname{lgamma}(s)\n*     ```\n*\n*     For example,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{lgamma}(7.3) &= \\ln(6.3) + \\operatorname{lgamma}(6.3) \\\\\n*     &= \\ln(6.3 \\cdot 5.3) + \\operatorname{lgamma}(5.3) \\\\\n*     &= \\ln(6.3 \\cdot 5.3 \\cdot 4.3 \\cdot 3.3 \\cdot2.3) + \\operatorname{lgamma}(2.3)\n*     \\end{align*}\n*     ```\n*\n* 2.  Compute a polynomial approximation of \\\\(\\mathrm{lgamma}\\\\) around its minimum (\\\\(\\mathrm{ymin} = 1.46163213\\\\)) to maintain monotonicity. On the interval \\\\(\\[\\mathrm{ymin} - 0.24, \\mathrm{ymin} + 0.28]\\\\) (i.e., \\\\(\\[1.22163213,1.74163213]\\\\)), we let \\\\(z = x - \\mathrm{ymin}\\\\) and use\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) = -1.214862905358496078218 + z^2 \\cdot \\operatorname{poly}(z)\n*     ```\n*\n*     where \\\\(\\operatorname{poly}(z)\\\\) is a \\\\(7\\\\) degree polynomial.\n*\n* 3.  Compute a rational approximation in the primary interval \\\\(\\[2,3]\\\\). Let \\\\( s = x - 2.0 \\\\). We can thus use the approximation\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) = \\frac{s}{2} + s\\frac{\\operatorname{P}(s)}{\\operatorname{Q}(s)}\n*     ```\n*\n*     with accuracy\n*\n*     ```tex\n*     \\biggl|\\frac{\\mathrm{P}}{\\mathrm{Q}} - \\biggr(\\operatorname{lgamma}(x)-\\frac{s}{2}\\biggl)\\biggl| < 2^{-35.0}\n*     ```\n*\n*     The algorithms are based on the observation\n*\n*     ```tex\n*     \\operatorname{lgamma}(2+s) = s(1 - \\gamma) + \\frac{\\zeta(2) - 1}{2} s^2 - \\frac{\\zeta(3) - 1}{3} s^3 + \\ldots\n*     ```\n*\n*     where \\\\(\\zeta\\\\) is the zeta function and \\\\(\\gamma = 0.5772156649...\\\\) is the Euler-Mascheroni constant, which is very close to \\\\(0.5\\\\).\n*\n* 4.  For \\\\(x \\geq 8\\\\),\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) \\approx \\biggl(x-\\frac{1}{2}\\biggr) \\ln(x) - x + \\frac{\\ln(2\\pi)}{2} + \\frac{1}{12x} - \\frac{1}{360x^3} + \\ldots\n*     ```\n*\n*     which can be expressed\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) \\approx \\biggl(x-\\frac{1}{2}\\biggr)(\\ln(x)-1)-\\frac{\\ln(2\\pi)-1}{2} + \\ldots\n*     ```\n*\n*     Let \\\\(z = \\frac{1}{x}\\\\). We can then use the approximation\n*\n*     ```tex\n*     f(z) = \\operatorname{lgamma}(x) - \\biggl(x-\\frac{1}{2}\\biggr)(\\ln(x)-1)\n*     ```\n*\n*     by\n*\n*     ```tex\n*     w = w_0 + w_1 z + w_2 z^3\n*     ```\n*\n*     where\n*\n*     ```tex\n*     |w - f(z)| < 2^{-29.6}\n*     ```\n*\n* 5.  For negative \\\\(x\\\\), since\n*\n*     ```tex\n*     -x \\Gamma(-x) \\Gamma(x) = \\frac{\\pi}{\\sin(\\pi x)}\n*     ```\n*\n*     where \\\\(\\Gamma\\\\) is the gamma function, we have\n*\n*     ```tex\n*     \\Gamma(x) = \\frac{\\pi}{\\sin(\\pi x)(-x)\\Gamma(-x)}\n*     ```\n*\n*     Since \\\\(\\Gamma(-x)\\\\) is positive,\n*\n*     ```tex\n*     \\operatorname{sign}(\\Gamma(x)) = \\operatorname{sign}(\\sin(\\pi x))\n*     ```\n*\n*     for \\\\(x < 0\\\\). Hence, for \\\\(x < 0\\\\),\n*\n*     ```tex\n*     \\mathrm{signgam} = \\operatorname{sign}(\\sin(\\pi x))\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{lgamma}(x) &= \\ln(|\\Gamma(x)|) \\\\\n*     &= \\ln\\biggl(\\frac{\\pi}{|x \\sin(\\pi x)|}\\biggr) - \\operatorname{lgamma}(-x)\n*     \\end{align*}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     Note that one should avoid computing \\\\(\\pi (-x)\\\\) directly in the computation of \\\\(\\sin(\\pi (-x))\\\\).\n*\n*     <!-- </note> -->\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{lgamma}(2+s) &\\approx s (1-\\gamma) & \\mathrm{for\\ tiny\\ s} \\\\\n* \\operatorname{lgamma}(x) &\\approx -\\ln(x) & \\mathrm{for\\ tiny\\ x} \\\\\n* \\operatorname{lgamma}(1) &= 0 & \\\\\n* \\operatorname{lgamma}(2) &= 0 & \\\\\n* \\operatorname{lgamma}(0) &= \\infty & \\\\\n* \\operatorname{lgamma}(\\infty) &= \\infty & \\\\\n* \\operatorname{lgamma}(-\\mathrm{integer}) &= \\pm \\infty\n* \\end{align*}\n* ```\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = absgammalnf( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = absgammalnf( 2.0 );\n* // returns 0.0\n*\n* @example\n* var v = absgammalnf( 4.0 );\n* // returns ~1.792\n*\n* @example\n* var v = absgammalnf( -0.5 );\n* // returns ~1.266\n*\n* @example\n* var v = absgammalnf( 0.5 );\n* // returns ~0.572\n*\n* @example\n* var v = absgammalnf( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = absgammalnf( NaN );\n* // returns NaN\n*/\nfunction absgammalnf( x ) {\n\tvar isNegative;\n\tvar nadj;\n\tvar flg;\n\tvar p2;\n\tvar p1;\n\tvar p;\n\tvar q;\n\tvar t;\n\tvar w;\n\tvar y;\n\tvar z;\n\tvar r;\n\n\tx = f32( x );\n\n\t// Special cases: NaN, +-infinity\n\tif ( isnanf( x ) || isInfinitef( x ) ) {\n\t\treturn x;\n\t}\n\t// Special case: 0\n\tif ( x === ZERO ) {\n\t\treturn PINF;\n\t}\n\tif ( x < ZERO ) {\n\t\tisNegative = true;\n\t\tx = f32( -x );\n\t} else {\n\t\tisNegative = false;\n\t}\n\t// If |x| < 2**-27, return -ln(|x|)\n\tif ( x < TINY ) {\n\t\treturn -lnf( x );\n\t}\n\tif ( isNegative ) {\n\t\t// If |x| >= 2**23, must be -integer\n\t\tif ( x >= TWO23 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tt = sinpif( x );\n\t\tif ( t === ZERO ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tnadj = lnf( f32( PI / absf( f32( t*x ) ) ) );\n\t}\n\t// If x equals 1 or 2, return 0\n\tif ( x === ONE || x === TWO ) {\n\t\treturn ZERO;\n\t}\n\t// If x < 2, use lgamma(x) = lgamma(x+1) - log(x)\n\tif ( x < TWO ) {\n\t\tif ( x <= f32( 0.9 ) ) {\n\t\t\tr = -lnf( x );\n\n\t\t\t// 0.7316 <= x <= 0.9\n\t\t\tif ( x >= f32( f32( YMIN-ONE ) + f32( 0.27 ) ) ) {\n\t\t\t\ty = f32( ONE - x );\n\t\t\t\tflg = 0;\n\t\t\t}\n\t\t\t// 0.2316 <= x < 0.7316\n\t\t\telse if ( x >= f32( f32( YMIN-ONE ) - f32( 0.23 ) ) ) {\n\t\t\t\ty = f32( x - f32( YMIN - ONE ) );\n\t\t\t\tflg = 1;\n\t\t\t}\n\t\t\t// 0 < x < 0.2316\n\t\t\telse {\n\t\t\t\ty = x;\n\t\t\t\tflg = 2;\n\t\t\t}\n\t\t} else {\n\t\t\tr = ZERO;\n\n\t\t\t// 1.7316 <= x < 2\n\t\t\tif ( x >= f32( YMIN + f32( 0.27 ) ) ) {\n\t\t\t\ty = f32( TWO - x );\n\t\t\t\tflg = 0;\n\t\t\t}\n\t\t\t// 1.2316 <= x < 1.7316\n\t\t\telse if ( x >= f32( YMIN - f32( 0.23 ) ) ) {\n\t\t\t\ty = f32( x - YMIN );\n\t\t\t\tflg = 1;\n\t\t\t}\n\t\t\t// 0.9 < x < 1.2316\n\t\t\telse {\n\t\t\t\ty = f32( x - ONE );\n\t\t\t\tflg = 2;\n\t\t\t}\n\t\t}\n\t\tswitch ( flg ) { // eslint-disable-line default-case\n\t\tcase 0:\n\t\t\tz = f32( y * y );\n\t\t\tp1 = polyvalA0( z );\n\t\t\tp2 = f32( z * polyvalA1( z ) );\n\t\t\tp = f32( f32( y*p1 ) + p2 );\n\t\t\tr = f32( r + f32( p - f32( HALF*y ) ) );\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tz = f32( y * y );\n\t\t\tp = f32( f32( T0C + f32( y*T1C ) ) + f32( z * polyvalT2( y ) ) );\n\t\t\tr = f32( r + f32( TF + p ) );\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tp1 = f32( y * polyvalU( y ) );\n\t\t\tp2 = f32( ONE + f32( y * polyvalV( y ) ) );\n\t\t\tr = f32( r + f32( f32( p1/p2 ) - f32( HALF*y ) ) );\n\t\t\tbreak;\n\t\t}\n\t}\n\t// 2 <= x < 8\n\telse if ( x < EIGHT ) {\n\t\tflg = truncf( x );\n\t\ty = f32( x - flg );\n\t\tp = f32( y * polyvalS( y ) );\n\t\tq = f32( ONE + f32( y * polyvalR( y ) ) );\n\t\tr = f32( f32( HALF*y ) + f32( p/q ) );\n\t\tz = ONE; // gammaln(1+s) = ln(s) + gammaln(s)\n\t\tswitch ( flg ) { // eslint-disable-line default-case\n\t\tcase 7:\n\t\t\tz = f32( z * f32( y + SIX ) );\n\n\t\t\t/* Falls through */\n\t\tcase 6:\n\t\t\tz = f32( z * f32( y + FIVE ) );\n\n\t\t\t/* Falls through */\n\t\tcase 5:\n\t\t\tz = f32( z * f32( y + FOUR ) );\n\n\t\t\t/* Falls through */\n\t\tcase 4:\n\t\t\tz = f32( z * f32( y + THREE ) );\n\n\t\t\t/* Falls through */\n\t\tcase 3:\n\t\t\tz = f32( z * f32( y + TWO ) );\n\t\t\tr = f32( r + lnf( z ) );\n\t\t}\n\t}\n\t// 8 <= x < 2**27\n\telse if ( x < TWO27 ) {\n\t\tt = lnf( x );\n\t\tz = f32( ONE / x );\n\t\ty = f32( z * z );\n\t\tw = f32( W0C + f32( z * polyvalW( y ) ) );\n\t\tr = f32( f32( f32( x-HALF ) * f32( t-ONE ) ) + w );\n\t}\n\t// 2**27 <= x <= Inf\n\telse {\n\t\tr = f32( x * f32( lnf(x)-ONE ) );\n\t}\n\tif ( isNegative ) {\n\t\tr = f32( nadj - r );\n\t}\n\treturn r;\n}\n\n\n// EXPORTS //\n\nmodule.exports = absgammalnf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the natural logarithm of the absolute value of the gamma function for a single-precision floating-point number.\n*\n* @module @stdlib/math-base-special-absgammalnf\n*\n* @example\n* var absgammalnf = require( '@stdlib/math-base-special-absgammalnf' );\n*\n* var v = absgammalnf( 1.0 );\n* // returns 0.0\n*\n* v = absgammalnf( 2.0 );\n* // returns 0.0\n*\n* v = absgammalnf( 4.0 );\n* // returns ~1.792\n*\n* v = absgammalnf( -0.5 );\n* // returns ~1.266\n*\n* v = absgammalnf( 0.5 );\n* // returns ~0.572\n*\n* v = absgammalnf( 0.0 );\n* // returns Infinity\n*\n* v = absgammalnf( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAuBA,IAAIC,EAAmB,QAAS,wCAAyC,EAkBzE,SAASC,EAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,mBAEDF,EAAiB,mBAAsBA,EAAiBE,EAAIF,EAAiB,mBAAsBA,EAAiBE,EAAI,mBAAoB,CAAC,CAAC,CAAC,CACvJ,CAKAH,EAAO,QAAUE,ICnDjB,IAAAE,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAuBA,IAAIC,EAAmB,QAAS,wCAAyC,EAkBzE,SAASC,EAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,kBAEDF,EAAiB,kBAAqBA,EAAiBE,EAAIF,EAAiB,oBAAuBA,EAAiBE,EAAI,mBAAoB,CAAC,CAAC,CAAC,CACvJ,CAKAH,EAAO,QAAUE,ICnDjB,IAAAE,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAuBA,IAAIC,EAAmB,QAAS,wCAAyC,EAkBzE,SAASC,EAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,iBAEDF,EAAiB,iBAAoBA,EAAiBE,EAAIF,EAAiB,mBAAsBA,EAAiBE,EAAI,mBAAoB,CAAC,CAAC,CAAC,CACrJ,CAKAH,EAAO,QAAUE,ICnDjB,IAAAE,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAuBA,IAAIC,EAAmB,QAAS,wCAAyC,EAkBzE,SAASC,EAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,oBAEDF,EAAiB,oBAAuBA,EAAiBE,EAAIF,EAAiB,mBAAsBA,EAAiBE,EAAIF,EAAiB,mBAAsBA,EAAiBE,EAAI,mBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CACtN,CAKAH,EAAO,QAAUE,ICnDjB,IAAAE,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAuBA,IAAIC,EAAmB,QAAS,wCAAyC,EAkBzE,SAASC,EAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,mBAEDF,EAAiB,mBAAsBA,EAAiBE,EAAIF,EAAiB,oBAAuBA,EAAiBE,EAAIF,EAAiB,mBAAsBA,EAAiBE,EAAIF,EAAiB,oBAAuBA,EAAiBE,EAAIF,EAAiB,mBAAsBA,EAAiBE,EAAI,oBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACpV,CAKAH,EAAO,QAAUE,ICnDjB,IAAAE,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAuBA,IAAIC,EAAmB,QAAS,wCAAyC,EAkBzE,SAASC,EAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,oBAEDF,EAAiB,oBAAuBA,EAAiBE,EAAIF,EAAiB,kBAAqBA,EAAiBE,EAAI,iBAAkB,CAAC,CAAC,CAAC,CACrJ,CAKAH,EAAO,QAAUE,ICnDjB,IAAAE,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAuBA,IAAIC,EAAmB,QAAS,wCAAyC,EAkBzE,SAASC,GAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,mBAEDF,EAAiB,mBAAqBA,EAAiBE,EAAIF,EAAiB,mBAAsBA,EAAiBE,EAAI,mBAAoB,CAAC,CAAC,CAAC,CACtJ,CAKAH,EAAO,QAAUE,KCnDjB,IAAAE,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAuBA,IAAIC,EAAmB,QAAS,wCAAyC,EAkBzE,SAASC,GAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,mBAEDF,EAAiB,mBAAsBA,EAAiBE,EAAI,qBAAsB,CAAC,CAC3F,CAKAH,EAAO,QAAUE,KCnDjB,IAAAE,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAoCA,IAAIC,GAAS,QAAS,kCAAmC,EACrDC,GAAc,QAAS,uCAAwC,EAC/DC,GAAO,QAAS,gCAAiC,EACjDC,EAAM,QAAS,+BAAgC,EAC/CC,GAAS,QAAS,kCAAmC,EACrDC,GAAS,QAAS,kCAAmC,EACrDC,EAAM,QAAS,wCAAyC,EACxDC,GAAK,QAAS,8BAA+B,EAC7CC,EAAO,QAAS,gCAAiC,EACjDC,GAAY,IACZC,GAAY,IACZC,GAAW,IACXC,GAAW,IACXC,GAAY,IACZC,GAAW,IACXC,GAAW,IACXC,GAAW,IAKXC,EAAOX,EAAK,CAAI,EAChBY,EAAOZ,EAAK,EAAI,EAChBa,EAAMb,EAAK,CAAI,EACfc,EAAMd,EAAK,CAAI,EACfe,GAAQf,EAAK,CAAI,EACjBgB,GAAOhB,EAAK,CAAI,EAChBiB,GAAOjB,EAAK,CAAI,EAChBkB,GAAMlB,EAAK,CAAI,EACfmB,GAAQnB,EAAK,CAAI,EACjBoB,GAAMpB,EAAK,aAAgB,EAC3BqB,GAAMrB,EAAK,cAAgB,EAC3BsB,GAAMtB,EAAK,UAAe,EAC1BuB,GAAQvB,EAAK,OAAU,EACvBwB,GAAQxB,EAAK,SAAY,EACzByB,GAAOzB,EAAK,oBAAqB,EACjC0B,EAAO1B,EAAK,UAAe,EAC3B2B,GAAK3B,EAAK,WAAgB,EAwK9B,SAAS4B,GAAaC,EAAI,CACzB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA,EACAC,EACAC,EACAC,EAKJ,GAHAX,EAAI7B,EAAK6B,CAAE,EAGNnC,GAAQmC,CAAE,GAAKlC,GAAakC,CAAE,EAClC,OAAOA,EAGR,GAAKA,IAAMlB,EACV,OAAOT,EASR,GAPK2B,EAAIlB,GACRmB,EAAa,GACbD,EAAI7B,EAAK,CAAC6B,CAAE,GAEZC,EAAa,GAGTD,EAAIJ,GACR,MAAO,CAAC5B,EAAKgC,CAAE,EAEhB,GAAKC,EAAa,CAMjB,GAJKD,GAAKN,KAGVc,EAAItC,GAAQ8B,CAAE,EACTQ,IAAM1B,GACV,OAAOT,EAER6B,EAAOlC,EAAKG,EAAKC,GAAKL,GAAMI,EAAKqC,EAAER,CAAE,CAAE,CAAE,CAAE,CAC5C,CAEA,GAAKA,IAAMhB,GAAOgB,IAAMf,EACvB,OAAOH,EAGR,GAAKkB,EAAIf,EAsCR,OArCKe,GAAK7B,EAAK,EAAI,GAClBwC,EAAI,CAAC3C,EAAKgC,CAAE,EAGPA,GAAK7B,EAAKA,EAAK0B,EAAKb,CAAI,EAAIb,EAAK,GAAK,CAAE,GAC5CsC,EAAItC,EAAKa,EAAMgB,CAAE,EACjBG,EAAM,GAGGH,GAAK7B,EAAKA,EAAK0B,EAAKb,CAAI,EAAIb,EAAK,GAAK,CAAE,GACjDsC,EAAItC,EAAK6B,EAAI7B,EAAK0B,EAAOb,CAAI,CAAE,EAC/BmB,EAAM,IAINM,EAAIT,EACJG,EAAM,KAGPQ,EAAI7B,EAGCkB,GAAK7B,EAAK0B,EAAO1B,EAAK,GAAK,CAAE,GACjCsC,EAAItC,EAAKc,EAAMe,CAAE,EACjBG,EAAM,GAGGH,GAAK7B,EAAK0B,EAAO1B,EAAK,GAAK,CAAE,GACtCsC,EAAItC,EAAK6B,EAAIH,CAAK,EAClBM,EAAM,IAINM,EAAItC,EAAK6B,EAAIhB,CAAI,EACjBmB,EAAM,IAGCA,EAAM,CACf,IAAK,GACJO,EAAIvC,EAAKsC,EAAIA,CAAE,EACfJ,EAAK/B,GAAWoC,CAAE,EAClBN,EAAKjC,EAAKuC,EAAInC,GAAWmC,CAAE,CAAE,EAC7BJ,EAAInC,EAAKA,EAAKsC,EAAEJ,CAAG,EAAID,CAAG,EAC1BO,EAAIxC,EAAKwC,EAAIxC,EAAKmC,EAAInC,EAAKY,EAAK0B,CAAE,CAAE,CAAE,EACtC,MACD,IAAK,GACJC,EAAIvC,EAAKsC,EAAIA,CAAE,EACfH,EAAInC,EAAKA,EAAKoB,GAAMpB,EAAKsC,EAAEjB,EAAI,CAAE,EAAIrB,EAAKuC,EAAIhC,GAAW+B,CAAE,CAAE,CAAE,EAC/DE,EAAIxC,EAAKwC,EAAIxC,EAAK2B,GAAKQ,CAAE,CAAE,EAC3B,MACD,IAAK,GACJD,EAAKlC,EAAKsC,EAAI9B,GAAU8B,CAAE,CAAE,EAC5BL,EAAKjC,EAAKa,EAAMb,EAAKsC,EAAI7B,GAAU6B,CAAE,CAAE,CAAE,EACzCE,EAAIxC,EAAKwC,EAAIxC,EAAKA,EAAKkC,EAAGD,CAAG,EAAIjC,EAAKY,EAAK0B,CAAE,CAAE,CAAE,EACjD,KACD,SAGST,EAAIV,GAOb,OANAa,EAAMlC,GAAQ+B,CAAE,EAChBS,EAAItC,EAAK6B,EAAIG,CAAI,EACjBG,EAAInC,EAAKsC,EAAIhC,GAAUgC,CAAE,CAAE,EAC3BF,EAAIpC,EAAKa,EAAMb,EAAKsC,EAAIjC,GAAUiC,CAAE,CAAE,CAAE,EACxCE,EAAIxC,EAAKA,EAAKY,EAAK0B,CAAE,EAAItC,EAAKmC,EAAEC,CAAE,CAAE,EACpCG,EAAI1B,EACKmB,EAAM,CACf,IAAK,GACJO,EAAIvC,EAAKuC,EAAIvC,EAAKsC,EAAIpB,EAAI,CAAE,EAG7B,IAAK,GACJqB,EAAIvC,EAAKuC,EAAIvC,EAAKsC,EAAIrB,EAAK,CAAE,EAG9B,IAAK,GACJsB,EAAIvC,EAAKuC,EAAIvC,EAAKsC,EAAItB,EAAK,CAAE,EAG9B,IAAK,GACJuB,EAAIvC,EAAKuC,EAAIvC,EAAKsC,EAAIvB,EAAM,CAAE,EAG/B,IAAK,GACJwB,EAAIvC,EAAKuC,EAAIvC,EAAKsC,EAAIxB,CAAI,CAAE,EAC5B0B,EAAIxC,EAAKwC,EAAI3C,EAAK0C,CAAE,CAAE,CACvB,MAGSV,EAAIL,IACba,EAAIxC,EAAKgC,CAAE,EACXU,EAAIvC,EAAKa,EAAMgB,CAAE,EACjBS,EAAItC,EAAKuC,EAAIA,CAAE,EACf,EAAIvC,EAAKsB,GAAMtB,EAAKuC,EAAI7B,GAAU4B,CAAE,CAAE,CAAE,EACxCE,EAAIxC,EAAKA,EAAKA,EAAK6B,EAAEjB,CAAK,EAAIZ,EAAKqC,EAAExB,CAAI,CAAE,EAAI,CAAE,GAIjD2B,EAAIxC,EAAK6B,EAAI7B,EAAKH,EAAIgC,CAAC,EAAEhB,CAAI,CAAE,EAEhC,OAAKiB,IACJU,EAAIxC,EAAK+B,EAAOS,CAAE,GAEZA,CACR,CAKA/C,EAAO,QAAUmC,KC5VjB,IAAIa,GAAO,IAKX,OAAO,QAAUA",
  "names": ["require_polyval_a0", "__commonJSMin", "exports", "module", "float64ToFloat32", "evalpoly", "x", "require_polyval_a1", "__commonJSMin", "exports", "module", "float64ToFloat32", "evalpoly", "x", "require_polyval_r", "__commonJSMin", "exports", "module", "float64ToFloat32", "evalpoly", "x", "require_polyval_s", "__commonJSMin", "exports", "module", "float64ToFloat32", "evalpoly", "x", "require_polyval_t2", "__commonJSMin", "exports", "module", "float64ToFloat32", "evalpoly", "x", "require_polyval_u", "__commonJSMin", "exports", "module", "float64ToFloat32", "evalpoly", "x", "require_polyval_v", "__commonJSMin", "exports", "module", "float64ToFloat32", "evalpoly", "x", "require_polyval_w", "__commonJSMin", "exports", "module", "float64ToFloat32", "evalpoly", "x", "require_main", "__commonJSMin", "exports", "module", "isnanf", "isInfinitef", "absf", "lnf", "truncf", "sinpif", "f32", "PI", "PINF", "polyvalA0", "polyvalA1", "polyvalR", "polyvalS", "polyvalT2", "polyvalU", "polyvalV", "polyvalW", "ZERO", "HALF", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "EIGHT", "T0C", "T1C", "W0C", "TWO23", "TWO27", "TINY", "YMIN", "TF", "absgammalnf", "x", "isNegative", "nadj", "flg", "p2", "p1", "p", "q", "t", "y", "z", "r", "main"]
}
